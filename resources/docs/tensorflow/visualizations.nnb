{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "Documentation on the visualizations (API) provided by the module [@tensorflow/tfjs-vis](https://www.npmjs.com/package/@tensorflow/tfjs-vis) can be found here:\n* [https://www.npmjs.com/package/@tensorflow/tfjs-vis](https://www.npmjs.com/package/@tensorflow/tfjs-vis)\n* [https://js.tensorflow.org/api_vis/1.5.1/#Visor%20&%20Surfaces](https://js.tensorflow.org/api_vis/1.5.1/#Visor%20&%20Surfaces)"
            ],
            "outputs": []
        },
        {
            "language": "shellscript",
            "source": [
                "# npm i @tensorflow/tfjs-node @tensorflow/tfjs-vis"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Sample tensorflow visualizations"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const tfvis = require('@tensorflow/tfjs-vis') as typeof import('@tensorflow/tfjs-vis');\nconst tf = require('@tensorflow/tfjs-node') as typeof import('@tensorflow/tfjs-node');"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Values Distribution"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const tensor = tf.tensor1d([0, 0, 0, 0, 2, 3, 4]);\n\nconst surface = { name: 'Values Distribution', tab: 'Model Inspection' };\nawait tfvis.show.valuesDistribution(surface, tensor);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Per Class Accuracy"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const labels = tf.tensor1d([0, 0, 1, 2, 2, 2]);\nconst predictions = tf.tensor1d([0, 0, 0, 2, 1, 1]);\n\nconst result = await tfvis.metrics.perClassAccuracy(labels, predictions);\n\nconst container = { name: 'Per Class Accuracy', tab: 'Evaluation' };\nconst categories = ['cat', 'dog', 'mouse'];\nawait tfvis.show.perClassAccuracy(container, result, categories);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Layer"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const model = tf.sequential({\n    layers: [\n        tf.layers.dense({ inputShape: [784], units: 32, activation: 'relu' }),\n        tf.layers.dense({ units: 10, activation: 'softmax' }),\n    ]\n});\n\nconst surface = { name: 'Layer Summary', tab: 'Model Inspection' };\ntfvis.show.layer(surface, model.getLayer(undefined, 1));\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Model Summary"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const model = tf.sequential({\n    layers: [\n        tf.layers.dense({ inputShape: [784], units: 32, activation: 'relu' }),\n        tf.layers.dense({ units: 10, activation: 'softmax' }),\n    ]\n});\n\nconst surface = { name: 'Model Summary', tab: 'Model Inspection' };\ntfvis.show.modelSummary(surface, model);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# History "
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const model = tf.sequential({\n    layers: [\n        tf.layers.dense({ inputShape: [784], units: 32, activation: 'relu' }),\n        tf.layers.dense({ units: 10, activation: 'softmax' }),\n    ]\n});\n\nmodel.compile({\n    optimizer: 'sgd',\n    loss: 'categoricalCrossentropy',\n    metrics: ['accuracy']\n});\n\nconst data = tf.randomNormal([100, 784]);\nconst labels = tf.randomUniform([100, 10]);\n\nfunction onBatchEnd(batch, logs) {\n    console.log('Accuracy', logs.acc);\n}\n\nconst surface = { name: 'show.history', tab: 'Training' };\n// Train for 5 epochs with batch size of 32.\nconst history = await model.fit(data, labels, {\n    epochs: 5,\n    batchSize: 32\n});\n\ntfvis.show.history(surface, history, ['loss', 'acc']);\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const model = tf.sequential({\n    layers: [\n        tf.layers.dense({ inputShape: [784], units: 32, activation: 'relu' }),\n        tf.layers.dense({ units: 10, activation: 'softmax' }),\n    ]\n});\n\nmodel.compile({\n    optimizer: 'sgd',\n    loss: 'categoricalCrossentropy',\n    metrics: ['accuracy']\n});\n\nconst data = tf.randomNormal([100, 784]);\nconst labels = tf.randomUniform([100, 10]);\n\nfunction onBatchEnd(batch, logs) {\n    console.log('Accuracy', logs.acc);\n}\n\nconst surface = { name: 'show.history live', tab: 'Training' };\n// Train for 5 epochs with batch size of 32.\nconst history = [];\nvoid await model.fit(data, labels, {\n    epochs: 5,\n    batchSize: 32,\n    callbacks: {\n        onEpochEnd: (epoch, log) => {\n            history.push(log);\n            tfvis.show.history(surface, history, ['loss', 'acc']);\n        }\n    }\n});\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const model = tf.sequential({\n    layers: [\n        tf.layers.dense({ inputShape: [784], units: 32, activation: 'relu' }),\n        tf.layers.dense({ units: 10, activation: 'softmax' }),\n    ]\n});\n\nmodel.compile({\n    optimizer: 'sgd',\n    loss: 'categoricalCrossentropy',\n    metrics: ['accuracy']\n});\n\nconst data = tf.randomNormal([100, 784]);\nconst labels = tf.randomUniform([100, 10]);\n\nfunction onBatchEnd(batch, logs) {\n    console.log('Accuracy', logs.acc);\n}\n\nconst surface = { name: 'show.fitCallbacks', tab: 'Training' };\n// Train for 5 epochs with batch size of 32.\nvoid await model.fit(data, labels, {\n    epochs: 5,\n    batchSize: 32,\n    callbacks: tfvis.show.fitCallbacks(surface, ['loss', 'acc']),\n});"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Table"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const headers = [\n    'Col 1',\n    'Col 2',\n    'Col 3',\n];\n\nconst values = [\n    [1, 2, 3],\n    ['4', '5', '6'],\n    ['<strong>7</strong>', true, false],\n];\n\nconst surface = { name: 'Table', tab: 'Charts' };\ntfvis.render.table(surface, { headers, values });\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Scatter Plot"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const series1 = Array(100).fill(0)\n    .map(y => Math.random() * 100 - (Math.random() * 50))\n    .map((y, x) => ({ x, y, }));\n\nconst series2 = Array(100).fill(0)\n    .map(y => Math.random() * 100 - (Math.random() * 150))\n    .map((y, x) => ({ x, y, }));\n\nconst series = ['First', 'Second'];\nconst data = { values: [series1, series2], series }\nconst surface = { name: 'Scatterplot', tab: 'Charts' };\ntfvis.render.scatterplot(surface, data);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Line Chart"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const series1 = Array(100).fill(0)\n    .map(y => Math.random() * 100 - (Math.random() * 50))\n    .map((y, x) => ({ x, y, }));\n\nconst series2 = Array(100).fill(0)\n    .map(y => Math.random() * 100 - (Math.random() * 150))\n    .map((y, x) => ({ x, y, }));\n\nconst series = ['First', 'Second'];\nconst data = { values: [series1, series2], series }\n\nconst surface = { name: 'Line chart', tab: 'Charts' };\ntfvis.render.linechart(surface, data);\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\nconst series1 = Array(100).fill(0)\n    .map(y => Math.random() * 100 + 50)\n    .map((y, x) => ({ x, y, }));\n\nconst data = { values: [series1] }\n\n// Render to visor\nconst surface = { name: 'Zoomed Line Chart', tab: 'Charts' };\ntfvis.render.linechart(surface, data, { zoomToFit: true });\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Histogram"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const data = Array(100).fill(0)\n    .map(x => Math.random() * 100 - (Math.random() * 50))\n\n// Push some special values for the stats table.\ndata.push(Infinity);\ndata.push(NaN);\ndata.push(0);\n\nconst surface = { name: 'Histogram', tab: 'Charts' };\ntfvis.render.histogram(surface, data);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Heatmap"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const cols = 50;\nconst rows = 20;\nconst values = [];\nfor (let i = 0; i < cols; i++) {\n    const col = []\n    for (let j = 0; j < rows; j++) {\n        col.push(i * j)\n    }\n    values.push(col);\n}\nconst data = { values };\n\n// Render to visor\nconst surface = { name: 'Heatmap', tab: 'Charts' };\ntfvis.render.heatmap(surface, data);\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\nconst data = {\n    values: [[4, 2, 8, 20], [1, 7, 2, 10], [3, 3, 20, 13]],\n    xTickLabels: ['cheese', 'pig', 'font'],\n    yTickLabels: ['speed', 'smoothness', 'dexterity', 'mana'],\n}\n\n// Render to visor\nconst surface = { name: 'Heatmap w Custom Labels', tab: 'Charts' };\ntfvis.render.heatmap(surface, data);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Confusion Matrix"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const rows = 5;\nconst cols = 5;\nconst values = [];\nfor (let i = 0; i < rows; i++) {\n  const row = []\n  for (let j = 0; j < cols; j++) {\n    row.push(Math.round(Math.random() * 50));\n  }\n  values.push(row);\n}\nconst data = { values };\n\n// Render to visor\nconst surface = { name: 'Confusion Matrix', tab: 'Charts' };\ntfvis.render.confusionMatrix(surface, data);\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const data = {\n    values: [[4, 2, 8], [1, 7, 2], [3, 3, 20]],\n}\n\n// Render to visor\nconst surface = {\n    name: 'Confusion Matrix with Excluded Diagonal', tab: 'Charts'\n};\n\ntfvis.render.confusionMatrix(surface, data, {\n    shadeDiagonal: false\n});"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Barchart"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const data = [\n    { index: 0, value: 50 },\n    { index: 1, value: 100 },\n    { index: 2, value: 150 },\n];\n\n// Render to visor\nconst surface = { name: 'Bar chart', tab: 'Charts' };\ntfvis.render.barchart(surface, data);\n"
            ],
            "outputs": []
        }
    ]
}